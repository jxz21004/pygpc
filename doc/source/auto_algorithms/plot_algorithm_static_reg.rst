
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_algorithms/plot_algorithm_static_reg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_algorithms_plot_algorithm_static_reg.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_algorithms_plot_algorithm_static_reg.py:


Algorithm: Static (Regression)
==============================

.. GENERATED FROM PYTHON SOURCE LINES 5-13

.. code-block:: default

    # Windows users have to encapsulate the code into a main function to avoid multiprocessing errors.
    # def main():
    import pygpc
    from collections import OrderedDict

    fn_results = 'tmp/static_reg'   # filename of output
    save_session_format = ".pkl"    # file format of saved gpc session ".hdf5" (slow) or ".pkl" (fast)








.. GENERATED FROM PYTHON SOURCE LINES 14-16

Loading the model and defining the problem
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 16-27

.. code-block:: default


    # define model
    model = pygpc.testfunctions.Peaks()

    # define problem
    parameters = OrderedDict()
    parameters["x1"] = pygpc.Beta(pdf_shape=[1, 1], pdf_limits=[1.2, 2])
    parameters["x2"] = 1.25
    parameters["x3"] = pygpc.Beta(pdf_shape=[1, 1], pdf_limits=[0, 0.6])
    problem = pygpc.Problem(model, parameters)








.. GENERATED FROM PYTHON SOURCE LINES 28-30

Setting up the algorithm
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 30-52

.. code-block:: default


    # gPC options
    options = dict()
    options["method"] = "reg"
    options["solver"] = "Moore-Penrose"
    options["settings"] = None
    options["order"] = [9, 9]
    options["order_max"] = 9
    options["interaction_order"] = 2
    options["matrix_ratio"] = 20
    options["error_type"] = "nrmsd"
    options["n_samples_validation"] = 1e3
    options["n_cpu"] = 0
    options["fn_results"] = fn_results
    options["save_session_format"] = save_session_format
    options["gradient_enhanced"] = True
    options["gradient_calculation"] = "FD_1st2nd"
    options["gradient_calculation_options"] = {"dx": 0.05, "distance_weight": -2}
    options["backend"] = "omp"
    options["grid"] = pygpc.Random
    options["grid_options"] = {"seed": 1}








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We will run the gPC with 10 initial simulations and see how well the approximation is

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    options["n_grid"] = 10








.. GENERATED FROM PYTHON SOURCE LINES 57-58

We will use adaptive sampling here, which runs additional simulations if the approximation error is higher than eps

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: default

    options["eps"] = 1e-3
    options["adaptive_sampling"] = True

    # initialize algorithm
    algorithm = pygpc.Static(problem=problem, options=options)








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Running the gpc
---------------

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: default


    # initialize gPC Session
    session = pygpc.Session(algorithm=algorithm)

    # run gPC algorithm
    session, coeffs, results = session.run()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Performing 10 simulations!
    It/Sub-it: 9/2 Performing simulation 01 from 10 [====                                    ] 10.0%
    Total parallel function evaluation: 0.0003075599670410156 sec
    Gradient evaluation: 0.0003609657287597656 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.291380620941126
    Extending grid from 10 to 13 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0002856254577636719 sec
    Gradient evaluation: 0.0004680156707763672 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.2044837685104057
    Extending grid from 13 to 16 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00042366981506347656 sec
    Gradient evaluation: 0.0008051395416259766 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.1869166009899583
    Extending grid from 16 to 19 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00026726722717285156 sec
    Gradient evaluation: 0.0005817413330078125 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.1570453566459462
    Extending grid from 19 to 22 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00031876564025878906 sec
    Gradient evaluation: 0.0006642341613769531 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.0807840240348068
    Extending grid from 22 to 25 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0014429092407226562 sec
    Gradient evaluation: 0.0007359981536865234 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 1.0702895984933383
    Extending grid from 25 to 28 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00029468536376953125 sec
    Gradient evaluation: 0.0011754035949707031 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.9786902322869285
    Extending grid from 28 to 31 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0004634857177734375 sec
    Gradient evaluation: 0.0014395713806152344 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.9315148852908084
    Extending grid from 31 to 34 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00044727325439453125 sec
    Gradient evaluation: 0.0015339851379394531 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.9124178570011638
    Extending grid from 34 to 37 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00045871734619140625 sec
    Gradient evaluation: 0.0017268657684326172 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.8990830585077442
    Extending grid from 37 to 40 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00046443939208984375 sec
    Gradient evaluation: 0.0012860298156738281 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.7441204728853799
    Extending grid from 40 to 43 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00046443939208984375 sec
    Gradient evaluation: 0.002051115036010742 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.6690596443485626
    Extending grid from 43 to 46 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0005116462707519531 sec
    Gradient evaluation: 0.0019011497497558594 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.5576800709548051
    Extending grid from 46 to 49 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0003590583801269531 sec
    Gradient evaluation: 0.0018525123596191406 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.40603690542952015
    Extending grid from 49 to 52 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.0002932548522949219 sec
    Gradient evaluation: 0.0014226436614990234 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 0.18048709328359552
    Extending grid from 52 to 55 by 3 sampling points
    Performing 3 simulations!
    It/Sub-it: 9/2 Performing simulation 1 from 3 [=============                           ] 33.3%
    Total parallel function evaluation: 0.00030803680419921875 sec
    Gradient evaluation: 0.0015146732330322266 sec
    Determine gPC coefficients using 'Moore-Penrose' solver (gradient enhanced)...
    -> relative nrmsd error = 3.887887378308846e-06




.. GENERATED FROM PYTHON SOURCE LINES 75-77

Postprocessing
--------------

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: default


    # read session
    session = pygpc.read_session(fname=session.fn_session, folder=session.fn_session_folder)

    # Post-process gPC
    pygpc.get_sensitivities_hdf5(fn_gpc=options["fn_results"],
                                 output_idx=None,
                                 calc_sobol=True,
                                 calc_global_sens=True,
                                 calc_pdf=True,
                                 algorithm="standard")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    > Loading gpc session object: tmp/static_reg.pkl
    > Loading gpc coeffs: tmp/static_reg.hdf5
    > Adding results to: tmp/static_reg.hdf5




.. GENERATED FROM PYTHON SOURCE LINES 90-94

Validation
----------
Validate gPC vs original model function (2D-surface)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 94-102

.. code-block:: default

    pygpc.validate_gpc_plot(session=session,
                            coeffs=coeffs,
                            random_vars=list(problem.parameters_random.keys()),
                            n_grid=[51, 51],
                            output_idx=0,
                            fn_out=None,
                            folder=None,
                            n_cpu=session.n_cpu)



.. image-sg:: /auto_algorithms/images/sphx_glr_plot_algorithm_static_reg_001.png
   :alt: Original model, gPC approximation, Difference (Original vs gPC)
   :srcset: /auto_algorithms/images/sphx_glr_plot_algorithm_static_reg_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-105

Validate gPC vs original model function (Monte Carlo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 105-122

.. code-block:: default

    nrmsd = pygpc.validate_gpc_mc(session=session,
                                  coeffs=coeffs,
                                  n_samples=int(1e4),
                                  output_idx=[0],
                                  fn_out=None,
                                  folder=None,
                                  plot=True,
                                  n_cpu=session.n_cpu)

    print("> Maximum NRMSD (gpc vs original): {:.2}%".format(max(nrmsd)))

    # On Windows subprocesses will import (i.e. execute) the main module at start.
    # You need to insert an if __name__ == '__main__': guard in the main module to avoid
    # creating subprocesses recursively.
    #
    # if __name__ == '__main__':
    #     main()



.. image-sg:: /auto_algorithms/images/sphx_glr_plot_algorithm_static_reg_002.png
   :alt: plot algorithm static reg
   :srcset: /auto_algorithms/images/sphx_glr_plot_algorithm_static_reg_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    > Maximum NRMSD (gpc vs original): 3.4e-06%





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.792 seconds)


.. _sphx_glr_download_auto_algorithms_plot_algorithm_static_reg.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_algorithm_static_reg.py <plot_algorithm_static_reg.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_algorithm_static_reg.ipynb <plot_algorithm_static_reg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
